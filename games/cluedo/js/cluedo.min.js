let NUM_PLAYERS=2,AVOID_BLOCKING_ROOM_ENTRY=!0,ALLOW_PEEKING_ANYTIME=!1,SHOW_CLUE_NUM=!1;const PCS=["big","medium","small"],ROW=["top","middle","bottom"],COL=["left","middle","right"],LOCK="&#x1F512;",KEY="&#x1f511;";let diceOne,diceTwo,deckSuperClues,deckSpareMurderCards,deckPlayerMurderCards,ignoredPlayers={},playersData=[],who=0,lastPlayer=0,bumpMode=!1,bumpingWho=0,remotePlay=!1,status="New game";function randInt(e){return Math.random()*e|0}function compareNumbers(e,t){return e-t}function compareNumbersBig1st(e,t){return t-e}function compareCardTypes(e,t){return e[0]-t[0]}function toHexChars(e,t){let a=e.toString(16);return a.length<t&&(a="0"+a),a}function encodeCards(e){const t=e.length;let a="";for(let o=0;o<t;++o)a+=toHexChars(170^e[o],2);return console.log(`masked cards code: 0x${a}`),a}function decodeCards(e){const t=e.length/2|0,a=[];for(let o=0,n=0;o<t;++o,n+=2)a[o]=170^parseInt(e.substring(n,n+2),16);return a}function encodeMystery(){return encodeCards(cardHolders)}function decodeMystery(e){return decodeCards(e)}function encodeMurderCards(e){const t=encodeCards(e);return`${who.toString(16)}${t}`}function decodeMurderCards(e){return[parseInt(e.substring(0,2),16),decodeCards(e.substring(2,e.length))]}function updateGameCode(){remotePlay=!1,$("#spanGameCode")[0].textContent=encodeMystery()}function copyGameLink(){const e=`https://sdneon.github.io/games/cluedo/cluedo.html?mys=${encodeMystery()}`;navigator.clipboard.writeText(e)}function copyGameCode(){const e=encodeMystery();navigator.clipboard.writeText(e)}function playerString(e){return e??=who,`<font color='${PLAYER_COLORS[e]}'>${PLAYERS[e]}</font>`}function announceNewCardsRecv(e){const{numCardsTaken:t,newCardsCode:a}=e;appendStatus(`${playerString()} got ${t} Murder cards\n        <span data-tooltip='Jump to Detective Notes' data-tooltip-position='right'>\n            <button onclick='gotoNotes();'>(goto Notes)</button></span>\n        <span data-tooltip='Copy new cards codes to share for remote play' data-tooltip-position='bottom'>\n            <button onclick='navigator.clipboard.writeText("${a}");'>Copy Cards Code: ${a}</button></span>`)}function gimme5MurCards(){announceNewCardsRecv(takeMurderCard(who,5))}function claimCards(){if(!remotePlay)return void showStatus("&#9888;&#65039; Cannot claim cards when <i>Not</i> in remote play");const e=decodeCards($("#inClaimCards")[0].value);if(e.length<=0)return void appendStatus(`&#9888;&#65039; Invalid cards code ${code}?! No card obtained.`);let t=0;createPlayerData(who);const a=playerCardDecks[who];e.forEach((e=>{e<0||e>=CARD_NAMES.length?appendStatus(`&#9888;&#65039; Tried to grab <i>invalid</i> card#${e}`):answers.indexOf(e)>=0||(a.indexOf(e)>=0?appendStatus(`&#x270B; Already has card#${e}`,void 0,!0):(++t,a.push(e),playersData[who].clues.cardsSeen[e]=!0,deckPlayerMurderCards.append(`<div class='bg_gold'>\n            <div id='player${who}_mur${e}' class='card_alone'\n                style='background-image: url(images/card-${CARD_IMAGES[e]}.png); background-repeat: no-repeat;background-size: 100%;'></div></div>`),deckSpareMurderCards.removeCard(e)))})),appendStatus(`&#x1F44C; Claimed ${t} card(s).`,void 0,!0)}function playerTokenClicked(e){let t;for(t=0;t<9;++t)if(playerPositions[t]===e)return t;return-1}function diceString(){return`<span data-tooltip='${diceOne.val}+${diceTwo.val}=${diceOne.val+diceTwo.val}' data-tooltip-position='top'>&nbsp;&nbsp;&nbsp;</span>`}function movePlayerThere(e,t){const a=playerPositions[e];if(void 0!==a){const t=$(`#cell_played${a}`);t.removeClass(`cell_player_${e}`),t[0].innerHTML="",$(`#cell${a}`).removeClass("cell_occupied")}playerPositions[e]=t;const o=$(`#cell_played${t}`);o.addClass(`cell_player_${e}`),o[0].innerHTML=diceString(),$(`#cell${t}`).addClass("cell_occupied"),e===who&&($("td").removeClass("shimmer pulsate"),o.addClass("shimmer"))}function checkResetClueCounters(){Object.keys(placedClues).length<=3&&resetClueCounters()}function cellClicked(e,t){const a=`${e}_${t}`;if(void 0!==invalidSpots[a])return void showStatus(`&#9940; @ ${t}, ${e}: Invalid/unreachable space`,void 0,!0);if(bumpMode){return void($(`#cell${a}`).hasClass("cell_occupied")?showStatus(`Cannot move other player (${PLAYERS[bumpingWho]}) to occupied space @ ${t}, ${e}! Try else where!`):(movePlayerThere(bumpingWho,a),showStatus(`Other player (${PLAYERS[bumpingWho]}) has been bumped to @ ${t}, ${e}`),bumpMode=!1))}if(void 0!==placedClues[a]){const e=placedClues[a];delete placedClues[a];$(`#cell${a}`).removeClass("cell_clue_counter cell_clue_counter_dummy cell_occupied"),$(`#cell_played${a}`)[0].innerHTML="",removedClues[e]=!0,updateClueAvail(e);const t=CLUES[e];if("murderCardFromDeck"===t[1]){const e=t[2];showStatus(`Take ${e} murder card${e>=1?"s":""} from deck`),announceNewCardsRecv(takeMurderCard(who,e))}else if("clue"===t[1]){const e=t[2],a=t[3];if($(`.cell_${e<WEAPONS.length?"wpn":"orn"}_${a}`).length<=0)showStatus(`&#x1F62D; Clue @ <b>${a}</b> is already <b><i>GONE/TAKEN</i></b>`);else if(activeClues.indexOf(e)<0){activeClues.push(e);const t=$("#divActiveClues");hasActiveClue()||t[0].children[0].remove(),addActiveClue(t,e,a),showStatus(`&#x1F60E; New clue available @ <b>${a}</b>`)}else showStatus(`&#x1F609; Reminder: clue available @ <b>${a}</b>, have another turn (roll again)`)}else if("look"===t[1])showStatus(`<h2>&#x1F970; ${t[0]}</h2>`),unlockFlaps(t[2],t[3],t[4]);else if("falseAlarm"===t[1])showStatus(`<h2>&#x1F61C; ${t[0]}</h2>`);else if("murderCardFromPlayer"===t[1]){t[2];const e=t[3],a=playerCardDecks[who],o=[];showStatus(t[0]);let n=0;if("everyone"===e)playerCardDecks.forEach(((e,t)=>{if(t!==who&&e.length>0){const r=randInt(e.length),l=e[r];e.splice(r,1),a.push(l),o.push(t),deckPlayerMurderCards.append(`<div id='player${who}_mur${l}' class='card_alone'\n                            style='background-image: url(images/card-${CARD_IMAGES[l]}.png); background-repeat: no-repeat;background-size: 100%;'></div>`),++n}}));else{const e=[];if(playerCardDecks.forEach(((t,a)=>{a!==who&&t.length>0&&e.push(a)})),e.length>0){let t=e.length>1?randInt(e.length):0;t=e[t],o.push(t);const r=playerCardDecks[t],l=randInt(r.length),s=r[l];r.splice(l,1),a.push(s),deckPlayerMurderCards.append(`<div id='player${who}_mur${s}' class='card_alone'\n                        style='background-image: url(images/card-${CARD_IMAGES[s]}.png); background-repeat: no-repeat;background-size: 100%;'></div>`),++n}}n<=0?appendStatus("Sadly no one has any Murder cards for you &#x1F62D;"):(o.forEach(((e,t)=>{o[t]=PLAYERS[e]})),appendStatus(`You got ${n} Murder card${n>1?"s":""} from ${o.join(",")} &#x1F604;`))}else showStatus(`&#x1F914; [Construction in progress...] Your clue is: ${t[0]}`);return movePlayerThere(who,a),void checkResetClueCounters()}if(void 0!==placedOrns[a]){const e=placedOrns[a],t=ORNAMENTS[e],o=e+WEAPONS.length,n=activeClues.indexOf(o);if(n<0)showStatus(`&#x1F605; <b>Garden Ornament <i>${t}</i></b> has NO clue yet!`);else{showStatus(`You have found the Clue at <b>Garden Ornament <i>${t}</i></b> &#x1F601;<br>Have a Super Clue card...`),delete placedOrns[a];$(`#cell${a}`).removeClass(`cell_orn_${ORNAMENTS[e]} cell_occupied`),removedOrns[e]=!0,activeClues.splice(n,1),$(`#active-clue-${o}`).remove(),takeActionCard(),checkNoMoreActiveClue(),movePlayerThere(who,a)}return}if(void 0!==placedWeapons[a]){const e=placedWeapons[a],t=WEAPONS[e],o=activeClues.indexOf(e);if(o<0)showStatus(`&#x1F605; <b><i>${t}</i> (Weapon)</b> has NO clue yet!`);else{showStatus(`You have found the Clue on <b><i>${t}</i> (weapon)</b> &#x1F601;<br>Have a Super Clue card...`),delete placedWeapons[a];$(`#cell${a}`).removeClass(`cell_wpn_${WEAPONS[e]} cell_occupied cell_has_weapon`),removedWeapons[e]=!0,activeClues.splice(o,1),$(`#active-clue-${e}`).remove(),takeActionCard(),checkNoMoreActiveClue(),movePlayerThere(who,a)}return}if($(`#cell${a}`).hasClass("cell_occupied")){let o=!1;const n=playerPositions[who];if(n==a)return;if(allRoomSlots[a]&&allRoomSlots[n]&&allRoomSlots[a]===allRoomSlots[n]){const a=n.split("_"),r=parseInt(a[0],10),l=parseInt(a[1],10);o=Math.abs(l-t)<=1&&Math.abs(r-e)<=1}o?(bumpMode=!0,playerPositions.forEach(((e,t)=>{a===e&&(bumpingWho=t)})),showStatus(`You can now bump the other player (${PLAYERS[bumpingWho]}) @ ${t}, ${e} away! Choose a new space to place them!`)):showStatus(`Cannot crowd with other player @ ${t}, ${e}! Go elsewhere~`)}else{if(void 0!==stairSpots[a])return showStatus(`&#129393; @ ${t}, ${e}: Admiring the stairs...`,void 0,!0),void movePlayerThere(who,a);showStatus(`&#128001;&#128001; All quiet @ ${t}, ${e}`,void 0,!0),movePlayerThere(who,a)}}function showStatus(e,t,a){const o=$("#divStatus")[0];o.innerHTML=t?`<font color="${t}"><b>${e}</b></font>`:e,a||o.scrollIntoView({behavior:"smooth",block:"end",inline:"nearest"})}function appendStatus(e,t,a){const o=$("#divStatus")[0];o.innerHTML+=t?`<br><font color="${t}"><b>${e}</b></font>`:"<br>"+e,a||o.scrollIntoView({behavior:"smooth",block:"end",inline:"nearest"})}function showWhoseTurn(e){const t=playerString(),a=$("#divWho");if(a[0].innerHTML=`${t} turn...`,a.addClass("pulsate_once"),$("#spanWhose")[0].innerHTML=t,setTimeout((()=>{a.removeClass("pulsate_once")}),1e3),lastPlayer===who)return;if(whereAmI(who,!0,!0),e)return;deckPlayerMurderCards[0].innerHTML="";const o=playerCardDecks[who],n=o.length;o.sort(compareNumbers);for(let e=0;e<n;++e){const t=o[e];deckPlayerMurderCards.append(`<div id='player${who}_mur${t}' class='card_alone'\n            style='background-image: url(images/card-${CARD_IMAGES[t]}.png); background-repeat: no-repeat;background-size: 100%;'></div>`)}restoreCurPlayerDetNotes(),updateDetNotesClueStyle(),lastPlayer=who}function saveLastPlayerDetNotes(e){if(e??=lastPlayer,e<0)return;let t,a,o;createPlayerData(e);const n=playersData[e].notepad;for(t=0;t<3;++t){for(a=0;a<9;++a){const e=`${t}${a}`;for(o=0;o<6;++o){const t=`#p${o}${e}`;n[t]=$(t)[0].checked}}for(a=0;a<4;++a){const e=`#select_${t}_${a}`;n[e]=$(e)[0].value}let e=`#select${t}`;n[e]=$(e)[0].value,e=`#detNoteCardHolder${t}`,n[e]=$(e)[0].value,e=`#detNoteSheet${t}`,n[e]=$(e)[0].value}n.clueStyle=$("#radDetectiveSmartEasy")[0].checked?1:$("#radDetectiveSmart")[0].checked?2:3}function restoreCurPlayerDetNotes(e){let t,a,o;createPlayerData(who);const n=playersData[who].notepad;for(t=0;t<3;++t){for(a=0;a<9;++a){const e=`${t}${a}`;for(o=0;o<6;++o){const t=`#p${o}${e}`;$(t)[0].checked=!0===n[t]}}for(a=0;a<4;++a){const e=`#select_${t}_${a}`,o=$(`#detFlap${t}_${a}`),r=$(e)[0];let l=n[e];void 0===l&&(l="Unknown"),r.value=l,"Red"===l?(o.css("background","#ff1e0d"),o.css("color","white")):"Green"===l?(o.css("background","#77bb41"),o.css("color","white")):"Blue"===l?(o.css("background","#0061ff"),o.css("color","white")):"Purple"===l?(o.css("background","#7b219f"),o.css("color","white")):"White"===l?(o.css("background","white"),o.css("color","white")):"Yellow"===l?(o.css("background","#f5ec00"),o.css("color","white")):(o.css("background","white"),o.css("color","black"))}let e=`#select${t}`,r=n[e];void 0===r&&(r="Unknown"),$(e)[0].value=r,e=`#detNoteCardHolder${t}`,r=n[e],void 0===r&&(r="Unknown"),$(e)[0].value=r,onChangeDetNoteCardHolder(t),e=`#detNoteSheet${t}`,r=n[e],void 0===r&&(r="Unknown"),$(e)[0].value=r}if(!e){let e=n.clueStyle;void 0===e&&(e=1),1===e?$("#radDetectiveSmartEasy")[0].checked=!0:2===e?$("#radDetectiveSmart")[0].checked=!0:$("#radDetectiveHardwork")[0].checked=!0}}function updateDetNotesClueStyle(){const e=$(".detective-card-table-clues");e.removeClass("detective-card-table-clues-1 detective-card-table-clues-2 detective-card-table-clues-3");let t=3;$("#radDetectiveSmartEasy")[0].checked?(t=1,$(".detective-card-table-clues").each(((e,t)=>{const a=$(t),o=a.attr("clues-data-min"),n=a.attr("clues-styles-min").split(","),{children:r}=t;for(let e=0;e<4;++e){r[e].textContent=o[e];const t=n[e],a=$(r[e]);t.split(";").forEach((e=>{e=e.split(":"),a.css(e[0],e[1])}))}}))):($("#radDetectiveSmart")[0].checked&&(t=2),$(".detective-card-table-clues").each(((e,t)=>{const a=$(t),o=a.attr("clues-data").split(","),n=a.attr("clues-styles").split(","),{children:r}=t;for(let e=0;e<4;++e){r[e].textContent=o[e];const t=n[e],a=$(r[e]);t.split(";").forEach((e=>{e=e.split(":"),a.css(e[0],e[1])}))}}))),e.addClass(`detective-card-table-clues-${t}`)}function refreshDetNotes(e){saveLastPlayerDetNotes(),createDetectiveCard(),restoreCurPlayerDetNotes(e)}function setShowClueNum(e){SHOW_CLUE_NUM!==e&&(SHOW_CLUE_NUM=e),SHOW_CLUE_NUM?Object.keys(placedClues).forEach((e=>{$(`#cell_played${e}`)[0].innerHTML=String(placedClues[e])})):Object.keys(placedClues).forEach((e=>{$(`#cell_played${e}`)[0].innerHTML=""}))}function setAvoidBlockingRoomEntry(e){AVOID_BLOCKING_ROOM_ENTRY!==e&&(AVOID_BLOCKING_ROOM_ENTRY=e)}function setAllowPeeks(e){ALLOW_PEEKING_ANYTIME!==e&&(ALLOW_PEEKING_ANYTIME=e)}function resetOptions(){const e=[!1,!1,!1,!0,!0,!1,!1,!1,!1];NUM_PLAYERS=2;for(let t=0;t<9;++t)$(`#cb_player_${t}`)[0].checked=e[t];AVOID_BLOCKING_ROOM_ENTRY=!0,$("#option_unblock_entry")[0].checked=!0,ALLOW_PEEKING_ANYTIME=!1,$("#option_allow_peeks")[0].checked=!1,SHOW_CLUE_NUM=!1,$("#option_hint_clue_num")[0].checked=!1,ignoredPlayers={},newGameBoard()}let cacheClueSpots,cacheWeaponSlots,cacheBadWeaponSlots,cacheOrnamentSlots,cacheInvalidSlots,cacheStairSlots,cachePlayerPositions,cacheActionCards,cachedGameBoard=!1,cacheCardHolders=!1,allRoomSlots={},clueSpots={},weaponSpots={},badWeaponSpots={},ornamentSpots={},invalidSpots={},stairSpots={},placedOrns={},placedClues={},placedWeapons={},removedOrns={};removedClues={},removedWeapons={},playerPositions=[],activeClues=[];let answers=[],cardHolders=[],cardHoldersLocks=[],numKeys=0,unlockedCardHolderId=-1,unlockedFlapId=-1,numPeeks=0,cardsDeck=[],actionCardsDeck=[],playerCardDecks=[];function genActionCards(){if(!cacheActionCards){cacheActionCards=[];let e=0;Object.keys(ACTION_CARDS).forEach((t=>{const a=ACTION_CARDS[t],o=a[0];a[0]=t;for(let t=0;t<o;++t)cacheActionCards.push([...a,e]),++e}))}actionCardsDeck=[...cacheActionCards],shuffle(actionCardsDeck)}function updatePlayersSelection(e){let t=!1;if(void 0!==e){const a=$(`#cb_player_${e}`)[0];if(t=a.checked,!t&&Object.keys(ignoredPlayers).length>=7)return a.checked=!0,void showStatus("Cannot remove player! As there're only 2 players!")}ignoredPlayers={};for(let e=0;e<9;++e){$(`#cb_player_${e}`)[0].checked||(ignoredPlayers[e]=!0)}if(NUM_PLAYERS=9-Object.keys(ignoredPlayers).length,void 0!==e)if(t){let t=$(`.cell_player_starter_${e}`)[0].id;t=t.substring(4,t.lastIndexOf("_"));if($(`#cell${t}`).hasClass("cell_occupied")){const e=t.indexOf("_");if(t.startsWith("0")||t.startsWith("19")){const a=parseInt(t.substring(e+1),10)+1;t=`${t.substring(0,e)}_${a}`}else{const a=parseInt(t.substring(0,e),10)+1;t=`${a}${t.substring(e)}`}}playerPositions[e]=t,$(`#cell_played${t}`).addClass(`cell_player_${e}`),showStatus(`${playerString(e)} has joined the game.`),whereAmI(e)}else{const t=playerPositions[e];$(`#cell_played${t}`).removeClass(`cell_player_${e}`),$(`#cell${t}`).removeClass("cell_occupied"),showStatus(`${playerString(e)} has left the game.`,void 0,!0)}}function lockAllFlaps(){numKeys=0,numPeeks=0;for(let e=0;e<3;++e)cardHoldersLocks[e]=[!1,!1,!1,!1]}function unlockAllFlaps(){for(let e=0;e<3;++e)cardHoldersLocks[e]=[!0,!0,!0,!0]}function unlockFlaps(e,t,a){numPeeks=-e,numKeys=e,unlockedCardHolderId=t,unlockedFlapId=a,-1!==t?a<0?cardHoldersLocks[t]=[!0,!0,!0,!0]:cardHoldersLocks[t][a]=!0:unlockAllFlaps()}function joinGame(e){const t=decodeMystery(e);answers=[...t],cardHolders=[...t],ALLOW_PEEKING_ANYTIME=!0,$("#option_allow_peeks")[0].checked=!0,remotePlay=!0,showStatus(`Joined game #${e}.<br>\n        Note that only the card holders are <i>synchronized</i> to the remote game,\n        so use the Detective Notes and card holders only.<br>\n        Begin!`)}function newGameBoard(){updatePlayersSelection(),console.log(`new game for ${NUM_PLAYERS} players`),$("div").removeClass("choice_unavailable"),SHOW_CLUE_NUM=$("#option_hint_clue_num")[0].checked;const e=$("#divPlayingArea");if(cachedGameBoard)e[0].innerHTML=cachedGameBoard,clueSpots=Object.assign({},cacheClueSpots),weaponSpots=JSON.parse(cacheWeaponSlots),badWeaponSpots=Object.assign({},cacheBadWeaponSlots),ornamentSpots=Object.assign({},cacheOrnamentSlots),invalidSpots=Object.assign({},cacheInvalidSlots),stairSpots=Object.assign({},cacheStairSlots),playerPositions=[...cachePlayerPositions];else{e[0].innerHTML="";let t="<table class='table_grid'>";for(let e=0;e<BOARD.length;++e){let a=BOARD[e];const o=a.length/2;t+=`<tr id='row${e}'>`;for(let n=0,r=0;n<o;++n,r+=2){const o=`${e}_${n}`,l=a.substring(r,r+2),s=l[0];let c="cell_container table_grid",i="",d="",u="",p="",h="";if("x"===s||"X"===s)c+=" cell_grass","X"===s&&(d+=" cell_title"),invalidSpots[o]=0;else if(s>="0"&&s<="8")playerPositions[s]=o,c+=` cell_player_starter_${s}`,u="cell_occupied",p+=` cell_player_${s}`;else if(s>="A"&&s<="Z")if(allRoomSlots[o]=s,c+=` cell_room${s}`,"s"===l[1])i+=" cell_stair_spot",stairSpots[o]=0;else{weaponSpots[s]||(weaponSpots[s]={}),weaponSpots[s][o]=0;const e=l[1];"R"!==e&&"C"!==e||(badWeaponSpots[o]=0)}else"g"===s?(i+=" cell_clue_spot",ornamentSpots[o]=0):"s"===s&&(i+=" cell_stair",stairSpots[o]=0);"c"!==l[1]&&"C"!==l[1]||(i+=" cell_clue_spot",clueSpots[o]=0),t+=`<td id='cell${o}_container' class='${c}' onclick='cellClicked(${e}, ${n});'>\n                    <div class='cell_container2'>\n                        <div id="roomLabel${o}" class='cell_room_label${d}'></div>\n                        <div style="z-index: 1;">\n                            <table class='cell ${i}'><tr><td id='cell${o}' class='cell ${u}'>\n                                <table class='cell'><tr><td id='cell_played${o}' class='cell ${p}'>\n                                    ${h}\n                                </td></tr></table>\n                            </td></tr></table>\n                        </div>\n                    </div>\n                </td>`}t+="</tr>"}t+="</table>",e.append(t),Object.keys(LABELS).forEach((e=>{$(`#roomLabel${e}`)[0].innerHTML=LABELS[e]})),PLAYERS.forEach(((e,t)=>{const a=$(`.cell_player_starter_${t} .cell_container2 div`);a[0].innerHTML=`${e}&#127808;`,a.css("font-size","0.8em")}));const a={l:"border-left",t:"border-top",r:"border-right",b:"border-bottom"};Object.keys(WALLS).forEach((e=>{WALLS[e].split(",").forEach((t=>{const o=$(`#cell${e}_container`),n="W"===t[1]?"dotted":"solid",r="x"===t[1]?"brown":"#777e";o.css(a[t[0]],`10px ${n} ${r}`)}))})),cachedGameBoard=e[0].innerHTML,cacheClueSpots=Object.assign({},clueSpots),cacheWeaponSlots=JSON.stringify(weaponSpots),cacheBadWeaponSlots=Object.assign({},badWeaponSpots),cacheOrnamentSlots=Object.assign({},ornamentSpots),cacheInvalidSlots=Object.assign({},invalidSpots),cacheStairSlots=Object.assign({},stairSpots),cachePlayerPositions=[...playerPositions]}let t;createCardHolders(),genActionCards(),placedOrns={},placedClues={},placedWeapons={},removedOrns={},removedClues={},removedWeapons={},activeClues=[];let a=Object.keys(ornamentSpots);for(t=0;t<ORNAMENTS.length;++t){const e=randInt(a.length),o=a[e];$(`#cell${o}`).addClass(`cell_orn_${ORNAMENTS[t]} cell_occupied`),placedOrns[o]=t,a.splice(e,1)}a.forEach((e=>{clueSpots[e]=0})),a=Object.keys(clueSpots);let o="cell_clue_counter_dummy cell_occupied";for(t=0;t<CLUES.length;++t){const e=randInt(a.length),n=a[e];$(`#cell${n}`).addClass(o),o="cell_clue_counter cell_occupied",SHOW_CLUE_NUM&&($(`#cell_played${n}`)[0].innerHTML=String(t)),placedClues[n]=t,a.splice(e,1)}Object.keys(placedClues).forEach((e=>{Object.keys(weaponSpots).forEach((t=>{delete weaponSpots[t][e]}))})),AVOID_BLOCKING_ROOM_ENTRY&&Object.keys(badWeaponSpots).forEach((e=>{Object.keys(weaponSpots).forEach((t=>{delete weaponSpots[t][e]}))}));const n=[0,1,2,3,4,5,6,7,8];for(t=0;t<WEAPONS.length;++t){const e=randInt(n.length),a=n[e],o=weaponSpots[ROOM_KEYS[t]],r=Object.keys(o),l=r[randInt(r.length)];$(`#cell${l}`).addClass(`cell_wpn_${WEAPONS[a]} cell_occupied cell_has_weapon`),placedWeapons[l]=a,n.splice(e,1),delete o[l]}const r=CARD_NAMES.length/3|0;for(answers=[randInt(r),randInt(r)+r,randInt(r)+2*r],cardHolders=[...answers],shuffle(cardHolders),lockAllFlaps(),updateGameCode(),t=0;t<CARD_NAMES.length;++t)t!==answers[0]&&t!==answers[1]&&t!==answers[2]&&cardsDeck.push(t);shuffle(cardsDeck),playerCardDecks=[];for(let e=0;e<PLAYERS.length;++e)playerCardDecks[e]=[];hideAllFlaps();const l=Object.keys(ignoredPlayers);for(let e=0;e<l.length;++e){const t=l[e];$("td").removeClass(`cell_player_${t}`);const a=playerPositions[t];$(`#cell${a}`).removeClass("cell_occupied")}for(playersData=[],t=0;t<PLAYERS.length;++t)playersData[t]={notepad:{},clues:{cardHolders:[[-1,-1,-1,-1],[-1,-1,-1,-1],[-1,-1,-1,-1]],cardsSeen:{}}};if(bumpMode=!1,status="New game",showStatus(status),createSuperClueDeck(),createDetectiveCard(),$("#divActiveClues")[0].innerHTML="",checkNoMoreActiveClue(),who=-1,nextPlayer(!0),void 0!==localStorage.savedGame&&showStatus('Would you like to restore saved game?\n            <button onclick="restoreSavedGame();">Yes</button>\n            <button onclick="showStatus(\'Begin!\');">No</button>'),window.location.search.length>0){const e=new URL(window.location).searchParams.get("mys");null!==e&&appendStatus(`Would you like to "join" game #${e}?\n                <button onclick="joinGame('${e}');">Yes</button>\n                <button onclick="showStatus('Begin!');">No</button>`)}}function enableLastCardDragAndFlip(e){const t=e.cards.length-1,a=e.cards[t];a.enableDragging(),a.enableFlipping()}function takeMurderCard(e,t){const a=[];for(;t>0&&cardsDeck.length>=1;){const o=cardsDeck.splice(0,1)[0];playerCardDecks[e].push(o),--t,a.push(o),createPlayerData(e),playersData[e].clues.cardsSeen[o]=!0,deckPlayerMurderCards.append(`<div class='bg_gold'>\n            <div id='player${who}_mur${o}' class='card_alone'\n                style='background-image: url(images/card-${CARD_IMAGES[o]}.png); background-repeat: no-repeat;background-size: 100%;'></div></div>`),deckSpareMurderCards.removeCard(o)}return{numCardsTaken:a.length,newCardsCode:encodeCards(a)}}function returnMurderCards(){const e=playerCardDecks[who];playerCardDecks[who]=[],cardsDeck.push(...e),e.forEach((e=>{deckSpareMurderCards.addCard(e)})),deckSpareMurderCards.shuffle(spareMurderCardsDeckOrder()),deckSpareMurderCards.smear(),deckPlayerMurderCards[0].innerHTML=""}function takeActionCard(){const e=actionCardsDeck.splice(0,1)[0];if(actionCardsDeck.push(e),deckSuperClues.showTopCard(),setTimeout((()=>{deckSuperClues.flipAllToBack(),deckSuperClues.moveTopCardToBottom()}),3e3),"murderCardFromDeck"===e[1]){const t=e[2];appendStatus(`Action card: <h2>Take ${t} murder cards from deck</h2>`),announceNewCardsRecv(takeMurderCard(who,t))}else appendStatus(`Action card: <h2>${e[0]}</h2>`),"look"===e[1]&&unlockFlaps(e[2],-1,-1);return e}function addActiveClue(e,t,a){let o="";t<WEAPONS.length?(void 0===a&&(a=WEAPONS[t]),o=`cell_wpn_${a}`):(void 0===a&&(a=ORNAMENTS[t-9]),o=`cell_orn_${a}`),e.append(`<td id='active-clue-${t}' class='cell ${o}' onclick='zoomToItem(${t});'></td>`)}function cardType(e){return e/9|0}const CARD_TYPES=["person","weapon","room"],CARD_TYPES_MAP={"-1":"unknown/any",0:"person",1:"weapon",2:"room"};function cardTypeName(e){return CARD_TYPES[cardType(e)]}const FLAP_MASK=[4278190080,16711680,65280,255],FLAPS_MAP=[[0,1,2,3],[2,3,0,1]];function identify(e,t,a,o){let n,r,l;t??={},a??=[];const s=[];if(-1!==e[0]&&-1!==e[1]&&-1!==e[2]&&-1!==e[3])return r=(255&e[0])<<24|(255&e[1])<<16|(255&e[2])<<8|255&e[3],l=CARD_CODES.indexOf(r),[l,[],[],cardType(l)];r=0;let c=0;for(n=0,j=24;n<4;++n,j-=8)-1!==e[n]?(r|=(255&e[n])<<j,c|=255<<j):s.push(n);let i=0,d=CARD_CODES;o&&(d=CARD_CODES_HARD,(e[0]>=7&&e[0]<=12||e[1]>=7&&e[1]<=12||e[2]>=0&&e[2]<=6||e[3]>=0&&e[3]<=6)&&(r=(65535&r)<<16|r>>16&65535,c=(65535&c)<<16|c>>16&65535,i=1));const u=[];let p=-1;for(n=0;n<d.length;++n)if((d[n]&c)===r&&!t[n]){const e=cardType(n);if(a.indexOf(e)>=0)continue;u.push([n,e]),1===u.length?p=e:p!==e&&(p=-1)}if(1===u.length)return l=u[0][0],[l,[],[],p];const h=s.length,f=u.length;for(n=h-1;n>=0;--n){const e=new Set,t=FLAPS_MAP[i][s[n]],a=FLAP_MASK[t];u.forEach((t=>{const o=t[0],n=d[o];e.add(n&a)}));const o=e.size;o===f||(1===o?s.splice(n,1):s[n]+=10)}return[-1,u,s,p]}function identifyThis(e,t,a,o){if(t??={},a??=[],e.forEach(((t,a)=>{"string"==typeof t&&(e[a]=ELEMENT_MAP.indexOf(t))})),void 0!==t.length){const e={};t.forEach(((t,a)=>{"string"==typeof t&&(e[CARD_NAMES.indexOf(t)]=!0)})),t=e}else Object.keys(t).forEach((e=>{e.length>3&&(delete t[e],t[CARD_NAMES.indexOf(e)]=!0)}));a.forEach(((e,t)=>{"string"==typeof e&&(a[t]=CARD_TYPES.indexOf(e))}));const n=identify(e,t,a,o),r=JSON.parse(JSON.stringify(n));let l=n[0];return l>=0&&(n[0]=CARD_NAMES[l]),l=n[1],l.forEach(((e,t)=>{l[t][0]=CARD_NAMES[e[0]],l[t][1]=CARD_TYPES[e[1]]})),l=n[2],l.forEach(((e,t)=>{let a=!1;e<10?a=!0:(e-=10,r[2][t]=e),l[t]=CARD_HOLDER_FLAP[e],a&&(l[t]+="*")})),n[3]=CARD_TYPES_MAP[n[3]],console.log(n),r[4]=n,r}const H1=0,H2=1,H3=2,CID=0,POSS=1,FLAP=2,TYPE=3,VEB=4;function all3CardsKnown(e,t,a){if(e[0][0]>=0&&e[1][0]>=0&&e[2][0]>=0){const o=[[e[0][3],e[0][0],e[0][4][0]],[e[1][3],e[1][0],e[1][4][0]],[e[2][3],e[2][0],e[2][4][0]]];return o.sort(compareCardTypes),t&&appendStatus(`I know! - <span class='spanGuess' style='visibility:hidden'><b><font color='${PLAYER_COLORS[o[0][1]]}'>${o[0][2]}</font></b></span> used the <span class='spanGuess' style='visibility:hidden'><b>${o[1][2]}</b></span> in the <span class='spanGuess' style='visibility:hidden'><b>${o[2][2]}</b></span> to smash the birthday cake!\n                <button id='buttRevealGuess' onclick='$(".spanGuess").css("visibility", ""); $("#buttRevealGuess").remove();'>(click here to reveal accusation)</button>\n                <br>What!? I thought it was a murder??\n                <br> Not at all~ it's just a strawberry jam splatter.`),a&&($("#select0")[0].value=o[0][2],$("#select1")[0].value=o[1][2],$("#select2")[0].value=o[2][2],$("#buttAccuse")[0].click()),!0}return!1}function identifyAgain(e,t,a){const o=e[0][3],n=e[1][3],r=e[2][3],l=[o,n,r],s=[];if(o>=0||n>=0||r>=0){for(i=0;i<3;++i){const e=[...l];e[i]=-1,s[i]=identifyThis(t.cardHolders[i],t.cardsSeen,e,a)}return console.log("new analysis"),s}return e}const FLAPS='[[[0,"Top Left",0],[0,"Bottom Right",1],[0,"Top Right",2],[0,"Bottom Left",3]],[[1,"Top Left",0],[1,"Bottom Right",1],[1,"Top Right",2],[1,"Bottom Left",3]],[[2,"Top Left",0],[2,"Bottom Right",1],[2,"Top Right",2],[2,"Bottom Left",3]]]';function think(e,t,a,o){let n,r=[],{clues:l}=playersData[who],s=playerCardDecks[who];if(remotePlay){let m;for(s=[],l={cardHolders:[[0,0,0,0],[0,0,0,0],[0,0,0,0]],cardsSeen:[]},n=0;n<3;++n){for(m=0;m<9;++m){$(`#p1${n}${m}`)[0].checked&&s.push(m+9*n)}for(m=0;m<4;++m){const b=ELEMENT_MAP2.indexOf($(`#select_${n}_${m}`)[0].value);l.cardHolders[n][m]=b}}}else t&&s.forEach((e=>{$(`#p1${e/9|0}${e%9}`)[0].checked=!0}));for(n=0;n<3;++n)r[n]=identifyThis(l.cardHolders[n],l.cardsSeen,void 0,o);if(l.lastResults=r,all3CardsKnown(r,e,t))return;let c=identifyAgain(r,l,o);if(c!==r){if(r=c,l.lastResults=r,all3CardsKnown(r,e,t))return;if(c=identifyAgain(r,l,o),c!==r&&(r=c,l.lastResults=r,all3CardsKnown(r,e,t)))return}const i=[];let d=0;for(n=0;n<3;++n)r[n][0]>=0&&(++d,i.push(n));const u=playerString();let p=d>0?`${u} knows ${d} out of the 3 WWW &#x1F600;<br>`:`${u} don't know any of the WWW &#x1F605; Find more clues, look at more flaps!<br>`;const h=[],f=[],C=[];for(n=0;n<3;++n){if(r[n][0]>=0)continue;const g=r[n][4][2];g.length>=4?C.push(n):g.forEach(((e,t)=>{e.endsWith("*")?h.push([n,e,r[n][2][t]]):f.push([n,e,r[n][2][t]])}))}if(e&&(i.length>0&&(p+="&#x1F601; You already know the ones in these card holder(s):<ul>\n",i.forEach((e=>{p+=`<li>${CARD_HOLDER_COLOUR[e]}</li>\n`})),p+="</ul>"),C.length>0&&(p+="&#x1F606; Try looking in these card holder(s) at least once:<ul>\n",C.forEach((e=>{p+=`<li>${CARD_HOLDER_COLOUR[e]}</li>\n`})),p+="</ul>"),h.length>0&&(p+="The <span data-tooltip-position='top' data-tooltip='just need 1 flap per card holder to identify the card!'><b>BEST</b></span> flaps to look at is/are:<ul>\n",h.forEach((e=>{p+=`<li>${CARD_HOLDER_COLOUR[e[0]]}'s <b>${e[1]}</b> flap.</li>\n`})),p+="</ul>"),f.length>0&&(p+="A combination of some of these other flaps may also help:<ul>\n",f.forEach((e=>{p+=`<li>${CARD_HOLDER_COLOUR[e[0]]}'s <b>${e[1]}</b> flap.</li>\n`})),p+="</ul>"),a&&appendStatus(p)),t){function y(e){const t=e.length;if(t<=0)return!1;shuffle(e);for(let o=0;o<t;++o){const t=e[o],n=t[0];if(-1!==unlockedCardHolderId&&unlockedCardHolderId!==n)continue;const r=t[2];if(-1!==unlockedFlapId&&unlockedFlapId!==r)continue;let l=t[1];return l.endsWith("*")&&(l=l.substring(0,l.length-1)),appendStatus(`${u} is going to look at <b>${l} flap</b> of the ${CARD_HOLDER_COLOUR[n]} card holder.`),clickedCardHolder(n,r,!1,!a),e.splice(0,1),!0}return!1}let k,v=0;if(numKeys>0)if(y(h))++v;else if(y(f))++v;else if(C.length>0){const w=JSON.parse(FLAPS);shuffle(C),k=C[0],y(w[k])?++v:C.length>1&&(k=C[1],y(w[k])?++v:C.length>2&&(k=C[2],y(w[k])&&++v))}p="",numKeys>0&&(p=`Skipped looking at ${numKeys} flap(s).<br>`);let _=[],S=s.length;for(v>0&&_.push(`${v} new flap${v>1?"s":""}`),S>0&&_.push(`${S} Murder Card${S>1?"s":""}`),_.length>0&&(_=` (${_.join(" & ")})`),n=0;n<3;++n)r[n][0]>=0&&($(`#detNoteCardHolder${n}`)[0].value=r[n][4][0],onChangeDetNoteCardHolder(n));appendStatus(`${p}${u} has finished studying their clues${_}.<br>`),v>0&&setTimeout((()=>{think(e,t)}),100)}}function createPlayerData(e){void 0===playersData[e].notepad&&(playersData[e].notepad={}),void 0===playersData[e].clues&&(playersData[e].clues={}),void 0===playersData[e].clues.cardHolders&&(playersData[e].clues.cardHolders=[[-1,-1,-1,-1],[-1,-1,-1,-1],[-1,-1,-1,-1]]),void 0===playersData[e].clues.cardsSeen&&(playersData[e].clues.cardsSeen={})}function restoreSavedGame(){const e=JSON.parse(localStorage.savedGame);let t;for($("td").removeClass("cell_occupied cell_clue_counter cell_clue_counter_dummy pulsate cell_has_weapon"),t=0;t<PLAYERS.length;++t)$("td").removeClass(`cell_player_${t}`),$("td").removeClass(`cell_wpn_${WEAPONS[t]}`),createPlayerData(t);for(t=0;t<ORNAMENTS.length;++t)$("td").removeClass(`cell_orn_${ORNAMENTS[t]} cell_occupied`);let a=[...Object.keys(clueSpots),...Object.keys(ornamentSpots)];for(a.forEach((e=>{$(`#cell_played${e}`)[0].innerHTML=""})),answers=e.answers,cardHolders=e.cardHolders,updateGameCode(),playerPositions=e.playerPositions,ignoredPlayers=e.ignoredPlayers,t=0;t<PLAYERS.length;++t){const e=$(`#cb_player_${t}`)[0];ignoredPlayers[t]?e.checked=!1:(movePlayerThere(t,playerPositions[t]),e.checked=!0)}NUM_PLAYERS=9-Object.keys(ignoredPlayers).length,actionCardsDeck=e.actionCardsDeck,deckSuperClues.removeSomeCards(100);let o=superCardsDeckOrder();o[0].forEach((e=>{deckSuperClues.addCard(e)})),deckSuperClues.shuffle(o),deckSuperClues.smear(),cardsDeck=e.cardsDeck,deckSpareMurderCards.removeSomeCards(100),o=spareMurderCardsDeckOrder(),o[0].forEach((e=>{deckSpareMurderCards.addCard(e)})),deckSpareMurderCards.shuffle(o),deckSpareMurderCards.smear(),placedOrns=e.placedOrns,placedClues=e.placedClues,placedWeapons=e.placedWeapons,a=Object.keys(placedOrns),a.forEach((e=>{const t=placedOrns[e];$(`#cell${e}`).addClass(`cell_orn_${ORNAMENTS[t]} cell_occupied`)})),a=Object.keys(placedClues),a.forEach((e=>{const t=placedClues[e];$(`#cell${e}`).addClass(`cell_clue_counter${0===t?"_dummy":""} cell_occupied`)})),a=Object.keys(placedWeapons),a.forEach((e=>{const t=placedWeapons[e];$(`#cell${e}`).addClass(`cell_wpn_${WEAPONS[t]} cell_occupied`)})),removedOrns=e.removedOrns,removedClues=e.removedClues,removedWeapons=e.removedWeapons,who=e.who,activeClues=e.activeClues;const n=$("#divActiveClues");n[0].innerHTML="",activeClues.length<=0?checkNoMoreActiveClue():activeClues.forEach((e=>{addActiveClue(n,e)})),playersData=e.playersData,restoreCurPlayerDetNotes(),updateDetNotesClueStyle(),playerCardDecks=e.playerCardDecks,deckPlayerMurderCards[0].innerHTML="",playerCardDecks[who].forEach((e=>{deckPlayerMurderCards.append(`<div id='player${who}_mur${e}' class='card_alone'\n            style='background-image: url(images/card-${CARD_IMAGES[e]}.png); background-repeat: no-repeat;background-size: 100%;'></div>`)})),AVOID_BLOCKING_ROOM_ENTRY=e.AVOID_BLOCKING_ROOM_ENTRY,$("#option_unblock_entry")[0].checked=AVOID_BLOCKING_ROOM_ENTRY,ALLOW_PEEKING_ANYTIME=e.ALLOW_PEEKING_ANYTIME,$("#option_allow_peeks")[0].checked=ALLOW_PEEKING_ANYTIME,SHOW_CLUE_NUM=e.SHOW_CLUE_NUM,$("#option_hint_clue_num")[0].checked=SHOW_CLUE_NUM,setShowClueNum(SHOW_CLUE_NUM),nextPlayer(!1,!0),showStatus("Game restored")}function saveGame(){const e={answers:answers,cardHolders:cardHolders,playerPositions:playerPositions,ignoredPlayers:ignoredPlayers,actionCardsDeck:actionCardsDeck,cardsDeck:cardsDeck,placedOrns:placedOrns,placedClues:placedClues,placedWeapons:placedWeapons,removedOrns:removedOrns,removedClues:removedClues,removedWeapons:removedWeapons,activeClues:activeClues,who:who,playerCardDecks:playerCardDecks,playersData:playersData,AVOID_BLOCKING_ROOM_ENTRY:AVOID_BLOCKING_ROOM_ENTRY,ALLOW_PEEKING_ANYTIME:ALLOW_PEEKING_ANYTIME,SHOW_CLUE_NUM:SHOW_CLUE_NUM};localStorage.savedGame=JSON.stringify(e)}function nextPlayer(e,t){e||t||(saveLastPlayerDetNotes(who),saveGame()),hideAllFlaps(),lockAllFlaps(),who>=0&&($(`#cell_played${playerPositions[who]}`)[0].innerHTML=""),lastPlayer=who,$("div").removeClass("bg_gold"),showStatus("",void 0,!0);do{++who>=PLAYERS.length&&(who=0)}while(ignoredPlayers[who]);showWhoseTurn(e)}function whereAmI(e,t,a){a&&$("td").removeClass("shimmer"),e??=who;const o=playerPositions[e],n=$(`#cell_played${o}`);n.addClass("pulsate"),t||n[0].scrollIntoView({behavior:"smooth",block:"end",inline:"nearest"}),setTimeout((()=>{n.removeClass("pulsate"),a&&n.addClass("shimmer")}),5e3)}function zoomToItem(e){let t;function a(e,a){Object.keys(e).forEach((o=>{e[o]===a&&(t=o)}))}if($("td").removeClass("pulsate"),e<WEAPONS.length?a(placedWeapons,e):a(placedOrns,e-9),void 0===t)return;const o=$(`#cell${t}`);o.addClass("pulsate"),o[0].scrollIntoView({behavior:"smooth",block:"end",inline:"nearest"}),setTimeout((()=>{o.removeClass("pulsate")}),5e3)}function gotoNotes(){const e=$("#divDetectiveNotepad");e.css("display",""),e[0].scrollIntoView({behavior:"smooth",block:"end",inline:"nearest"})}function gotoHolderInNotes(e){const t=$("#divDetectiveNotepad"),a=$(`#detFlap${e}_3`)[0];t.css("display",""),a.scrollIntoView({behavior:"smooth",block:"end",inline:"nearest"})}function goTop(){$("#divDetectiveNotepad").css("display","none"),window.scrollTo(0,0)}function hidePlayer(){const e=Object.keys(ignoredPlayers).length;if(e>=7)return void showStatus("Cannot hide any more players, as only 2 players left!");const t=who;ignoredPlayers[who]=!0;const a=playerPositions[who];$(`#cell_played${a}`).removeClass(`cell_player_${who}`),$(`#cell${a}`).removeClass("cell_occupied"),nextPlayer(),showStatus(`<font color="${PLAYER_COLORS[t]}"><b>${PLAYERS[t]}</b></font> is No longer playing.`),6===e&&$("#divButHidePlayer").css("display","none")}function hasActiveClue(){return!$($("#divActiveClues")[0].children[0]).hasClass("no-active-clue")}function checkNoMoreActiveClue(){const e=$("#divActiveClues");e.children().length<=0&&(e.append("<th class='no-active-clue' colspan='31'>\n                    (No Active Super Clues)\n                </th>"),appendStatus("No more active Super clues &#x1f641;"))}function removeOccupiedSlots(e){for(let t=e.length-1;t>=0;--t){const a=e[t];$(`#cell${a}`).hasClass("cell_occupied")&&e.splice(t,1)}}function resetClueCounters(){let e,t=Object.keys(ornamentSpots);removeOccupiedSlots(t);let a=Object.keys(removedOrns);for(e=0;e<a.length;++e){const o=parseInt(a[e]);if(t.length<=0){console.log(`WARNING: No more garden spaces for Ornament: ${ORNAMENT[o]}`);continue}const n=randInt(t.length),r=t[n];$(`#cell${r}`).addClass(`cell_orn_${ORNAMENTS[o]} cell_occupied`),placedOrns[r]=o,t.splice(n,1),delete removedOrns[o]}for(clueSpots=Object.assign({},cacheClueSpots),t.forEach((e=>{clueSpots[e]=0})),t=Object.keys(clueSpots),removeOccupiedSlots(t),a=Object.keys(removedClues),e=0;e<a.length;++e){const o=parseInt(a[e],10),n=randInt(t.length),r=t[n],l=0!==o?"cell_clue_counter cell_occupied":"cell_clue_counter_dummy cell_occupied";$(`#cell${r}`).addClass(l),SHOW_CLUE_NUM&&($(`#cell_played${r}`)[0].innerHTML=String(o)),placedClues[r]=o,updateClueAvail(o,!0),t.splice(n,1)}removedClues={},weaponSpots=JSON.parse(cacheWeaponSlots);const o=Object.keys(weaponSpots);for(let e=o.length-1;e>=0;--e){const t=o[e],a=weaponSpots[t];let n=!1;Object.keys(a).forEach((e=>{$(`#cell${e}`).hasClass("cell_has_weapon")&&(n=!0)})),n?o.splice(e,1):removeOccupiedSlots(a)}for(Object.keys(placedClues).forEach((e=>{o.forEach((t=>{delete weaponSpots[t][e]}))})),a=Object.keys(removedWeapons),shuffle(o),e=0;e<a.length;++e){const t=parseInt(a[e],10),n=weaponSpots[o[e]],r=Object.keys(n),l=r[randInt(r.length)];$(`#cell${l}`).addClass(`cell_wpn_${WEAPONS[t]} cell_occupied cell_has_weapon`),placedWeapons[l]=t,delete removedWeapons[t]}appendStatus("Finished resetting clue counters &#x1F604;")}function accuse(){let e=$("#select0")[0].value,t=$("#select1")[0].value,a=$("#select2")[0].value;if("Unknown"===e)return void showStatus("You cannot accuse No one!!");if("Unknown"===t)return void showStatus("You cannot accuse without identifying the murder weapon!!");if("Unknown"===a)return void showStatus("You cannot accuse without knowing where!!");appendStatus(`${playerString()} accuses <span class='spanGuess' style='visibility:hidden'><b>${playerString(CARD_NAMES.indexOf(e))}</b></span> of using <span class='spanGuess' style='visibility:hidden'><b>${t}</b></span> in the <span class='spanGuess' style='visibility:hidden'><b>${a}</b></span>...\n        <button id='buttRevealGuess' onclick='$(".spanGuess").css("visibility", ""); $("#buttRevealGuess").remove();'>(click here to reveal accusation)</button>`),e=CARD_NAMES.indexOf(e),t=CARD_NAMES.indexOf(t),a=CARD_NAMES.indexOf(a);const o=[e,t,a],n=[...answers].sort(compareNumbers);let r=!0;for(let e=0;e<3;++e)if(o[e]!==n[e]){r=!1;break}r?(appendStatus(`<h2>Congratulations! You are Right! &#x1F601;</h2>\n            <br><button onclick="showAllFlaps(true);">Show Answer</button>\n            <br>${htmlGiveUpButt}`),returnMurderCards()):appendStatus(`<h3>Yikes! You are Wrong! &#x1F62C;</h3>\n            <br><button onclick="showAllFlaps(true);">Show Answer</button>\n            <br>${htmlGiveUpButt}`)}const htmlGiveUpButt="<button id='buttHideAns' onclick=\"hideAllFlaps();\">Hide Answer</button>";function giveUp(){showStatus(`You've given up!? &#128517;<br>${htmlGiveUpButt}`),showAllFlaps(!0)}function toggleView(e){const t=$(`#${e}`);"none"===t.css("display")?t.css("display",""):t.css("display","none")}function onDiceRolled(e,t){let a="";diceOne.val===diceTwo.val&&(a="Doubles: you may re-roll if desired.<br>"),6===diceOne.val&&6===diceTwo.val&&(a+="6+6: Resetting all clue counters, etc.",resetClueCounters()),$(`#cell_played${playerPositions[who]}`)[0].innerHTML=diceString(),showStatus(a)}function createDice(){if($("#dice1").length>0)return;const e=$(".dice-container");e.append($(Dice.html("dice1"))),e.append($(Dice.html("dice2"))),$(document).ready((()=>{diceOne||(diceOne=new Dice("dice1",!0),diceTwo=new Dice("dice2",!0),diceOne.link(diceTwo),diceOne.rollHandler=onDiceRolled)}))}function superCardsDeckOrder(){return[actionCardsDeck.map((e=>e[3])).reverse()]}function spareMurderCardsDeckOrder(){return[[...cardsDeck].reverse()]}let popupSuperClues,popupSpareMurderCards,popupPlayerMurderCards,poupupCluesList,popupRules;function createSuperClueDeck(){if(popupSuperClues){deckSuperClues.removeSomeCards(100);const e=superCardsDeckOrder();deckSuperClues.addCards(e[0]),deckSuperClues.shuffle(e),deckSuperClues.smear()}else deckSuperClues=Deck(18,"superclue"),deckSuperClues.cards.forEach((function(e,t){function a(){}e.enableDragging(),e.enableFlipping(),e.$el.addEventListener("mousedown",a),e.$el.addEventListener("touchstart",a)})),popupSuperClues=new WinBox({title:"Super Clues",x:"70%",y:"10px",width:"30%",height:"500px",html:"\n<div style=\"flex: 18\">\n        <table>\n            <tr>\n                <td rowspan='3'>\n                    <div id='deck-container' class='deck-container'>\n                </td>\n                <td>\n                    <button onclick='shuffleSuperClue();'>shuffle</button>\n                    <button onclick='fanSuperClue();'>fan</button>\n                </td>\n            </tr>\n            <tr><td>\n                <span data-tooltip='Reveal all cards' data-tooltip-position='right'>\n                    <button onclick='spreadSuperClue();'>&#x1F441;</button></span>\n                <span data-tooltip='Hide/Put back all cards' data-tooltip-position='right'>\n                    <button onclick='resetSuperClueDeck();'>&#x1F648;</button></span>\n            </td></tr><tr><td>\n            </td></tr>\n        </table>\n</div>",oncreate:()=>{const e=document.getElementById("deck-container");deckSuperClues.mount(e),deckSuperClues.shuffle(superCardsDeckOrder()),deckSuperClues.smear()},onclose:function(){return this.minimize(),!0}});if(popupSpareMurderCards){deckSpareMurderCards.removeSomeCards(100);const e=spareMurderCardsDeckOrder();deckSpareMurderCards.addCards(e[0]),deckSpareMurderCards.shuffle(e),deckSpareMurderCards.smear()}else deckSpareMurderCards=Deck(24,"murder"),deckSpareMurderCards.cards.forEach((function(e,t){function a(){}e.enableDragging(),e.enableFlipping(),e.$el.addEventListener("mousedown",a),e.$el.addEventListener("touchstart",a)})),popupSpareMurderCards=new WinBox({title:"Spare Murder Cards",x:"70%",y:(window.innerHeight/2|0)+"px",width:"30%",height:"500px",html:"\n<div style=\"flex: 18\">\n        <table>\n            <tr>\n                <td rowspan='3'>\n                    <div id='deck-container2' class='deck-container'>\n                </td>\n                <td>\n                    <button onclick='shuffleSpareMurderCards();'>shuffle</button>\n                    <button onclick='fanSpareMurderCards();'>fan</button>\n                </td>\n            </tr>\n            <tr><td>\n                <span data-tooltip='Reveal all cards' data-tooltip-position='right'>\n                    <button onclick='spreadSpareMurderCards();'>&#x1F441;</button></span>\n                <span data-tooltip='Hide/Put back all cards' data-tooltip-position='right'>\n                    <button onclick='resetSpareMurderCards();'>&#x1F648;</button></span>\n            </td></tr>\n        </table>\n</div>",oncreate:()=>{const e=document.getElementById("deck-container2");deckSpareMurderCards.mount(e);const t=[24,25,26],a=[...answers];function o(e){e<24?deckSpareMurderCards.removeCard(e):t.splice(t.indexOf(e),1)}a.sort(compareNumbersBig1st),o(a[0]),o(a[1]),o(a[2]),t.forEach((e=>{deckSpareMurderCards.addCard(e),enableLastCardDragAndFlip(deckSpareMurderCards)})),deckSpareMurderCards.shuffle(spareMurderCardsDeckOrder()),deckSpareMurderCards.smear()},onclose:function(){return this.minimize(),!0}});deckPlayerMurderCards=$("#deck-container3"),deckPlayerMurderCards[0].innerHTML=""}function resetSuperClueDeck(){deckSuperClues.straighten(),deckSuperClues.flipAllToBack(),deckSuperClues.smear()}function shuffleSuperClue(){deckSuperClues.flipAllToBack(),shuffle(actionCardsDeck),deckSuperClues.shuffle(!0),deckSuperClues.shuffle(!0),deckSuperClues.shuffle(superCardsDeckOrder()),deckSuperClues.smear()}function resetSpareMurderCards(){deckSpareMurderCards.straighten(),deckSpareMurderCards.flipAllToBack(),deckSpareMurderCards.smear()}function shuffleSpareMurderCards(){deckSpareMurderCards.flipAllToBack(),shuffle(cardsDeck),deckSpareMurderCards.shuffle(!0),deckSpareMurderCards.shuffle(!0),deckSpareMurderCards.shuffle(spareMurderCardsDeckOrder()),deckSpareMurderCards.smear()}function fanSuperClue(){deckSuperClues.fan()}function spreadSuperClue(){deckSuperClues.flipAllToFront(),deckSuperClues.spread()}function fanSpareMurderCards(){deckSpareMurderCards.fan()}function spreadSpareMurderCards(){deckSpareMurderCards.flipAllToFront(),deckSpareMurderCards.spread()}function clickedCardHolder(e,t,a,o){const n=$(`#cardHolder${e}_${t}`);function r(){n.css("background",""),n.css("color",""),n[0].textContent="?",n.removeClass("flap_open flap_being_viewed")}if(n.hasClass("flap_open"))return void r();if(!a&&!ALLOW_PEEKING_ANYTIME){if(numKeys<=0)return void appendStatus("Are you trying to cheat? - No unlocks available! &#x1F9D0;");if(!cardHoldersLocks[e][t])return void appendStatus(`${CARD_HOLDER_FLAP[t]} flap of ${CARD_HOLDER_COLOUR[e]} is locked. Are you peeking at the right holder and/or flap? &#x1F914;`)}--numKeys<0&&(numKeys=0);const l=cardHolders[e],s=CARD_CODES[l];let c=0;switch(t){case 0:c=s>>24&255;break;case 1:c=s>>16&255;break;case 2:c=s>>8&255;break;default:c=255&s}if(o?(n.addClass("flap_being_viewed"),n[0].innerHTML="&#x1F441;"):(n.addClass("flap_open"),c<ELEMENT_COLOURS.length?(n.css("background",ELEMENT_COLOURS[c]),n[0].innerHTML=""):(n.css("background","white"),n.css("color","black"),n[0].innerHTML=ELEMENT_MAP[c])),a)numPeeks=0;else{createPlayerData(who),playersData[who].clues.cardHolders[e][t]=c;const a=`${e}_${t}`,o=`#select_${a}`;if($(o)[0].value=ELEMENT_MAP2[c],changeCellColour(`#detFlap${a}`,o),ALLOW_PEEKING_ANYTIME)++numPeeks>=3&&showStatus("&#x1F925;");else{const a=numKeys>0?`${numKeys} more flap peek(s) available &#x1F600;`:"No more peeks allowed &#x1F648;";appendStatus(`You've peeked at ${CARD_HOLDER_FLAP[t]} flap of ${CARD_HOLDER_COLOUR[e]}. ${a}`)}setTimeout((()=>{r()}),3e3)}}function showAllFlaps(e){if(e)for(let e=0;e<3;++e){const t=$(`#card-holder-container-${e}`),a=cardHolders[e];t[0].innerHTML="",t.addClass(`card_${a}`),t.css("width","250px")}else for(let e=0;e<3;++e)for(let t=0;t<4;++t)clickedCardHolder(e,t,!0)}function hideAllFlaps(){if($("#cardHolder0_0").length<=0)createCardHolders();else for(let e=0;e<3;++e){for(let t=0;t<4;++t){const a=$(`#cardHolder${e}_${t}`);a.css("background",""),a.css("color",""),a[0].innerHTML="?"}const t=$(`#cardHolder${e}_M`);t[0].innerHTML=solveThis[e];for(let e=0;e<CARD_NAMES.length;++e)t.removeClass(`card_${e}`)}}function onChangeDetNoteCardHolder(e){const t=$(`#detNoteCardHolder${e}`)[0].value,a=$(`#detNoteCardHolderImg${e}`)[0];if("Unknown"===t)return void(a.src="images/card-unknown.png");const o=CARD_NAMES.indexOf(t);a.src=`images/card-${CARD_IMAGES[o]}.png`}const solveThis=["<span data-tooltip='Jump to Beige card holder in Detective Notes' data-tooltip-position='left'>\n        <button onclick='gotoHolderInNotes(0);' style='background:#dedea9'>(goto Notes)</button></span>","<span data-tooltip='Jump to Green card holder in Detective Notes' data-tooltip-position='left'>\n        <button onclick='gotoHolderInNotes(1);' style='background:#008d00; color:white'>(goto Notes)</button></span>","<span data-tooltip='Jump to Black card holder in Detective Notes' data-tooltip-position='left'>\n        <button onclick='gotoHolderInNotes(2);' style='background:#555; color:white'>(goto Notes)</button></span>"],bgColors=["#d0d09e","darkgreen","black"],fontColor=["black","black","white"];function createCardHolders(){if(cacheCardHolders){$("#card-holder-container")[0].innerHTML=cacheCardHolders}else{const e=Object.keys(CARD_HOLDERS),t=e.length;let a="card-holder-flap";for(let o=0;o<t;++o){o>=2&&(a+="-black");const t=$(`#card-holder-container-${o}`);e[o];t.append(`\n            <div id='cardHolder${o}'>\n                <table style='background: ${bgColors[o]}; color: ${fontColor[o]}'>\n                    <tr>\n                        <td id='cardHolder${o}_0' class='${a}' onclick='clickedCardHolder(${o}, 0);'>?</td><td class='card_holder_space'></td>\n                        <td id='cardHolder${o}_2' class='${a}' onclick='clickedCardHolder(${o}, 2);'>?</td>\n                    </tr><tr>\n                        <td id='cardHolder${o}_M' colspan='3' class='card_holder_middle'>${solveThis[o]}</td>\n                    </tr><tr>\n                        <td id='cardHolder${o}_3' class='${a}' onclick='clickedCardHolder(${o}, 3);'>?</td><td class='card_holder_space'></td>\n                        <td id='cardHolder${o}_1' class='${a}' onclick='clickedCardHolder(${o}, 1);'>?</td>\n                    </tr>\n                </table>\n            </div>`)}const o=$("#card-holder-container")[0];cacheCardHolders=o.innerHTML}}function changeCellColour(e,t){const a=$(t)[0].value,o=$(e);"Red"===a?(o.css("background","#ff1e0d"),o.css("color","white")):"Green"===a?(o.css("background","#77bb41"),o.css("color","white")):"Blue"===a?(o.css("background","#0061ff"),o.css("color","white")):"Purple"===a?(o.css("background","#7b219f"),o.css("color","white")):"White"===a?(o.css("background","white"),o.css("color","white")):"Yellow"===a?(o.css("background","#f5ec00"),o.css("color","white")):(o.css("background","white"),o.css("color","black"))}const CARD_STYLES=["'background:#f5ec00;'","'background:#ff1e0d; color:white;'","'background:brown; color:white;'","''","'background:gray; color:white;'","'background:#77bb41;'","'background:#7b219f; color:white;'","'background:#0061ff; color:white;'","'background:pink;'","'background:#fdd5d5;'","'background:#ffa6a6;'","'background:#fdd5d5;'","'background:#ffa6a6;'","'background:#fdd5d5;'","'background:#ffa6a6;'","'background:#fdd5d5;'","'background:#ffa6a6;'","'background:#fdd5d5;'","'background:#7b219f; color:white;'","'background:lightgreen;'","'background:#0061ff; color:white;'","'background:orange;'","'background:#77bb41;'","'background:pink;'","'background:lightcyan'","'background:#f5ec00;'","'background:#d966d9;'"];function createDetectiveCard(){const e=!$("#radDetectiveHardwork")[0].checked;let t=0,a=["","",""];for(let e=0;e<CARD_NAMES.length;++e)a[e/9|0]+=`<option value="${CARD_NAMES[e]}" style=${CARD_STYLES[e]}>${CARD_NAMES[e]}</option>`;const o=['<option value="Unknown">?</option>\n        <option value="Red" style=\'background:#ff1e0d; color:white;\'>Red</option>\n        <option value="Green" style=\'background:#77bb41;\'>Green</option>\n        <option value="Blue" style=\'background:#0061ff; color:white;\'>Blue</option>\n        <option value="0">0</option>\n        <option value="1">1</option>\n        <option value="2">2</option>\n        <option value="4">4</option>\n        <option value="5">5</option>\n        <option value="7">7</option>','<option value="Unknown">?</option>\n        <option value="Red" style=\'background:#ff1e0d; color:white;\'>Red</option>\n        <option value="Green" style=\'background:#77bb41;\'>Green</option>\n        <option value="Blue" style=\'background:#0061ff; color:white;\'>Blue</option>\n        <option value="Purple" style=\'background:#7b219f; color:white;\'>Purple</option>\n        <option value="0">0</option>\n        <option value="1">1</option>\n        <option value="2">2</option>','<option value="Unknown">?</option>\n        <option value="Purple" style=\'background:#7b219f; color:white;\'>Purple</option>\n        <option value="White">White</option>\n        <option value="Yellow" style=\'background:#f5ec00;\'>Yellow</option>\n        <option value="4">4</option>\n        <option value="5">5</option>\n        <option value="7">7</option>','<option value="Unknown">?</option>\n        <option value="Green" style=\'background:#77bb41;\'>Green</option>\n        <option value="Purple" style=\'background:#7b219f; color:white;\'>Purple</option>\n        <option value="White">White</option>\n        <option value="Yellow" style=\'background:#f5ec00;\'>Yellow</option>\n        <option value="0">0</option>\n        <option value="1">1</option>\n        <option value="2">2</option>\n        <option value="4">4</option>\n        <option value="5">5</option>\n        <option value="7">7</option>'],n=["&#129485;","&#9876;&#65039;","&#127968;"];let r="card-holder-flap";for(let l=0;l<3;++l){const s=$(`#detective-card-container-${l}`);s.empty();let c=`<td><table class='detective-card-table'>\n            <tr>\n            </tr>\n            <tr>\n                <td><span data-tooltip-position='top' data-tooltip='maybe this?'>&#10004;</span></td>\n                <td><span data-tooltip-position='top' data-tooltip='I have this card'>&#x270B;</span></td>\n                <td style='background:#d0d09e; border-left: 2px solid black;'><span data-tooltip-position='top' data-tooltip='maybe in Beige card holder'>Be</span></td>\n                <td style='background:green; color:white;'><span data-tooltip-position='top' data-tooltip='maybe in Green card holder'>G</span></td>\n                <td style='background:black; color:white; border-right: 2px solid black;'><span data-tooltip-position='top' data-tooltip='maybe in Black card holder'>Bk</span></td>\n                <td colspan='3'>\n                    Most likely: <select id='detNoteSheet${l}'>\n                        <option value="Unknown">(Unknown)</option>\n                        ${a[l]}\n                </select>&nbsp;${n[l]}</td>\n            </tr>`;for(let a=0;a<9;++a,++t){const o=CARD_CODES[t],n=CARD_NAMES[t];let r=o>>24&255,s=o>>16&255,i=o>>8&255,d=255&o,u=ELEMENT_MAP2[r],p=ELEMENT_MAP2[s],h=ELEMENT_MAP2[i],f=ELEMENT_MAP2[d],C=!0;if(1===u.length)if(e)C=!1;else{let e=u,t=p;u=h,p=f,h=e,f=t,e=r,t=s,r=i,s=d,i=e,d=t}const y="background:white;color:black";let m=y,b=y,g=y,k=y;C?(m=`background:${ELEMENT_COLOURS[r]};color:${ELEMENT_TEXT_COLOURS[r]}`,b=`background:${ELEMENT_COLOURS[s]};color:${ELEMENT_TEXT_COLOURS[s]}`):(g=`background:${ELEMENT_COLOURS[i]};color:${ELEMENT_TEXT_COLOURS[i]}`,k=`background:${ELEMENT_COLOURS[d]};color:${ELEMENT_TEXT_COLOURS[d]}`);const v=CARD_STYLES[t].substring(1),_="'border-left: 2px solid black;"+v,S="'border-right: 2px solid black;"+v;c+=`<tr style='border: 3px solid black'>\n                <td class="detective-card-table-col1p" style=${CARD_STYLES[t]}><input type="checkbox" name="p0${l}${a}" id="p0${l}${a}"></td>\n                <td class="detective-card-table-col1p" style=${CARD_STYLES[t]}><input type="checkbox" name="p1${l}${a}" id="p1${l}${a}"></td>\n                <td class="detective-card-table-col1p" style=${_}><input type="checkbox" name="p2${l}${a}" id="p2${l}${a}"></td>\n                <td class="detective-card-table-col1p" style=${CARD_STYLES[t]}><input type="checkbox" name="p3${l}${a}" id="p3${l}${a}"></td>\n                <td class="detective-card-table-col1p" style=${S}><input type="checkbox" name="p4${l}${a}" id="p4${l}${a}"></td>\n                <td class="detective-card-table-col1q" style=${CARD_STYLES[t]}><input type="checkbox" name="p5${l}${a}" id="p5${l}${a}">\n                <label for="q${l}${a}">${n}</label><br>\n                <td class='detective-card-table-clues detective-card-table-clues-1'\n                    clues-data='${u},${p},${h},${f}' clues-data-min='${u[0]}${h[0]}${f[0]}${p[0]}'\n                    clues-styles='${m},${b},${g},${k}' clues-styles-min='${m},${g},${k},${b}'>\n                    <div class='detective-card-table-clue' style='${m}'>${u}</div>\n                    <div class='detective-card-table-clue' style='${b}'>${p}</div>\n                    <div class='detective-card-table-clue' style='${g}'>${h}</div>\n                    <div class='detective-card-table-clue' style='${k}'>${f}</div></td></tr>`;$(`#select${l}`).append(`<option value="${n}" style=${CARD_STYLES[t]}>${n}</option>`)}c+="</tr></table></td>",s[0].innerHTML=c,l>=2&&(r+="-black"),c='<td style="width:20px;"></td><td>',c+=`\n            <table style='background: ${bgColors[l]}; color: ${fontColor[l]}'>\n                <tr>\n                    <td id='detFlap${l}_0' class='${r}'>\n                        <select id="select_${l}_0" onchange='changeCellColour("#detFlap${l}_0", "#select_${l}_0");'>\n                            ${o[0]}\n                        </select>\n                    </td><td class='card_holder_space' rowspan='3' style='text-align: center;'>\n                        <div><select id='detNoteCardHolder${l}' onchange='onChangeDetNoteCardHolder(${l});'>\n                            <option value="Unknown">(Unknown)</option>\n                            ${a.join(" ")}\n                        </select></div>\n                        <div><img id='detNoteCardHolderImg${l}' src='images/card-unknown.png' style='width:200px'/></div>\n                    </td>\n                    <td id='detFlap${l}_2' class='${r}'>\n                        <select id="select_${l}_2" onchange='changeCellColour("#detFlap${l}_2", "#select_${l}_2");'>>\n                            ${o[1]}\n                        </select>\n                    </td>\n                </tr>\n                <tr>\n                    <td></td><td></td>\n                </tr><tr>\n                    <td id='detFlap${l}_3' class='${r}'>\n                        <select id="select_${l}_3" onchange='changeCellColour("#detFlap${l}_3", "#select_${l}_3");'>>\n                            ${o[2]}\n                        </select>\n                    </td>\n                    <td id='detFlap${l}_1' class='${r}'>\n                        <select id="select_${l}_1" onchange='changeCellColour("#detFlap${l}_1", "#select_${l}_1");'>>\n                            ${o[3]}\n                        </select>\n                    </td>\n                </tr>\n            </table>`,s.append(c)}updateDetNotesClueStyle()}const RULES='\n<div id=\'divRules\'>\n(Courtesy of / recorded by <a href=\'https://cluepedia.fandom.com/wiki/Super_Cluedo_Challenge/Rules\' target="_blank">Cluepdia Wiki</a>; with <b>my recommendations</b> for better gameplay)\n<div class="mw-parser-output"><div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none" aria-pressed=\'true\'><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>\n<ul>\n<li class="toclevel-1 tocsection-1"><a href="#Set_up"><span class="tocnumber">1</span> <span class="toctext">Set up</span></a></li>\n<ul>\n<li class="toclevel-2 tocsection-8"><a href="#Webpage_Play"><span class="tocnumber">1.2</span> <span class="toctext">Webpage Play</span></a></li>\n<li class="toclevel-2 tocsection-9"><a href="#Partial_AI"><span class="tocnumber">1.2</span> <span class="toctext">Partial AI</span></a></li>\n</ul>\n<li class="toclevel-1 tocsection-2"><a href="#Gameplay"><span class="tocnumber">2</span> <span class="toctext">Gameplay</span></a>\n<ul>\n<li class="toclevel-2 tocsection-3"><a href="#Secret_Passages"><span class="tocnumber">2.1</span> <span class="toctext">Secret Passages</span></a></li>\n<li class="toclevel-2 tocsection-4"><a href="#Accusation"><span class="tocnumber">2.2</span> <span class="toctext">Accusation</span></a>\n<ul>\n<li class="toclevel-3 tocsection-5"><a href="#In_a_2_player_game"><span class="tocnumber">2.2.1</span> <span class="toctext">In a 2 player game</span></a></li>\n<li class="toclevel-3 tocsection-6"><a href="#In_a_game_of_more_than_2_players"><span class="tocnumber">2.2.2</span> <span class="toctext">In a game of more than 2 players</span></a></li>\n<li class="toclevel-3 tocsection-7"><a href="#In_web_based_game"><span class="tocnumber">2.2.3</span> <span class="toctext">In a web-based game</span></a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<h2><span class="mw-headline" id="Set_up">Set up</span></h2>\n<ol><li>Unfold the playing area and place it on a large flat surface.</li>\n<li>Place one Weapon in each room.</li>\n<li>Place the four Garden Ornaments on any four Super Cluedo spaces in the garden.</li>\n<li>Place each character piece on their correct starting space.</li>\n<li>Place the 30 Clue Counters on any of the Super Cluedo space. These should be placed at random, face down, indoors or in the garden (there will be some Super Cluedo spaces unused).</li>\n<li>Shuffle the Super Clue Cards and place these near the board within the reach of all players.</li>\n<li>One player shuffles the Character Cards and places them face down. The same is down with the Weapon Cards and finally the Room Cards. There are now three piles of cards face down. These piles must now be moved around so that no one knows which pile is which. One card is taken from each pile and the cards are placed one by one into the three Murder Card Holders.\n    <ol>\n    <li>Two of the corners show COLOURS which are associated with the Person, Weapon or Room. This information can be found in the Detective Note Sheets.</li>\n    <li>Two of the corners show NUMBERS which are associated with the Person, Weapon or Room. This information can be found in the Detective Note Sheets.</li>\n    </ol>\n</li>\n<li>Once the Murder Cards have been placed in the Murder Card Holders the remaining Murder Cards are shuffled together thoroughly and placed face down next to the Super Clue Cards.</li>\n<li>Each player take a "wipe off" Detective Note Sheet.</li></ol>\n<h3><span class="mw-headline" id="Webpage_Play">Webpage Play</span></h3>\n<p>When using Neon\'s Cluedo webpage to play, most setup is automatically done.\n</p>\n<ol>\n<li>Go to the bottom of the page to select players. You may still add/remove players after the game is started.</li>\n<li>Refresh the page (or click the \'New Game\' button) to start a new game. You will be offered the chance to (a) restore a save game if available (click the corresponding \'Yes\' button), (b) join a \'remote\' play  (click the corresponding \'Yes\' button), or start a new game (click \'No\' button or just roll the dice and go!).\n    <ul>\n        <li>\'Remote\' play is a temporary proxy for networked multiplayer.\n            <ol>\n                <li>A host player hosts the game on a main webpage. Share this \'main\' game board using video chat.</li>\n                <li>Click the \'Copy Game Link\' button and send the link to the other players.</li>\n                <li>The latter opens the game page in their own devices to keep notes privately. The shared game code \'mirrors\' the current mystery to their device.</li>\n                <li>Remote players directs the Host player to help make their moves. When a clue counter reward or Super Clue triggers:\n                    <ul>\n                        <li>For viewing flaps: remote players use their own device to click the \'mirrored\' card holders and take notes.</li>\n                        <li>For Murder cards: Host has to send the \'Cards Code\' to the current remote player. The latter claims the code in the Detective Notes in their own device, and views the Murder cards obtained, and take notes.</li>\n                    </ul>\n                </li>\n                <li>Host plays as normal on the main screen, and pauses sharing when making his private inspections and note taking.</li>\n            </ol>\n        </li>\n    </ul>\n</li>\n<li>Click the dice to roll. Click the \'Find Me!\' button to scroll your player token into view. Mouse over the token to recall your rolled dice numbers.</li>\n<li>Click on map spaces to move. Clicking on items trigger relevant actions, which are stated at the top of the page.</li>\n<li>Click \'(goto Notes)\' button to jump to Detective Notes section to record your findings. When finished, click the \'(back to top)\' button to hide your Notes and jump back to the top of the page.</li>\n<li>Click \'Next Player\' button to save game and pass the turn to the next player.</li>\n</ol>\n<h3><span class="mw-headline" id="Partial_AI">Partial AI</span></h3>\n<p>To play against partial Computer Players, help it to:\n</p>\n<ol>\n<li>Roll dice and move player token to find clue counters or active Super Clue items.</li>\n<ul>\n<li>If you want a \'weaker\' AI, simply move its token \'more aimlessly\' or take bigger detours. E.g.: Go after clues one or two turns later, so as to let human players go after the clues first! Send AI\'s token outside and go round the garden, LOL!</li>\n</ul>\n<li>When an action is available (Murder cards received or flaps available for peeking), click the \'Act Secretly\' button to let the AI automatically select flaps to view, study available Murder cards and even make an accusation!</li>\n<li>Click \'Next Player\' to pass.</li>\n</ol>\n<p>If you require assistance, you may click the \'Analyze\' button to get recommendations. If more help is required, you may further click on the \'Act\' button to automatically select the best flaps to view, study all your clues and form accusations!\n</p>\n<h2><span class="mw-headline" id="Gameplay">Gameplay</span></h2>\n<ol><li>Each player chooses a character and moves this piece throughout the game.</li>\n<li>Choose a starting player. The first player throws both dice and then moves their character EITHER the sum of the two dice OR the number on any single dice.</li>\n<li>Play continues in a clockwise direction with the next player in the same way.</li>\n<li>Character pieces may be moved vertically of horizontally but not diagonally. They cannot retrace their step by going over the same space more than once during one turn. They cannot move through walls and can only enter the room through the Doors, French Windows (arrowed), or Secret Passages. (See #8 - #12).</li>\n<li>If a player lands on a Clue Counter (by an exact throw only) the number is called out and the counter placed face up on the title space in the centre of the board. The player must now follow instructions given on the Detective Note as follows:    a) If the Clue involves taking a murder card from the pack or from another player this is done, taking care not to show other players any cards held. These cards are now kept by that player. The Clue Counter is then placed face down by the side of the board.       b) If the Clue involves looking under a flap (or flaps) then the player should do this so other players can see their actions but NOT the information concealed under the flap. The Clue Counter is then placed face down by the side of the board.       c) If the clue involves a clue being situated on a Weapon or in the Garden then all players must race towards the Clue. (The player who LANDED on the clue counter throws first). The first player to land on the space occupied by the Weapon or Garden Ornament in question removes it from the board and takes the top SUPER CLUE Card. The instructions are followed and the card replaced on the bottom of the pack. The Clue Counter is then placed face down by the side of the board.\n    <ol>\n        <li><i><b>Extra rule clarifications/recommended</b></i>:\n            <ol>\n                <li>To make gameplay faster, players NEED NOT all rush for the new clue of Weapon or Garden Ornament. Instead, players may choose to go after other clue counters, especially if they can\'t reach the clue object. I.e. every player can decide when they wish to go after and take the clue.</li>\n                <li>Immediately place/discard the Clue Counter face down by the side of the board. Write the clue (Weapon or Garden Ornament) down on a whiteboard for all players to know which clue objects are active. Erase it when any player finds the clue.</li>\n            </ol>\n        </li>\n    </ol>\n</li>\n<li>Any information gathered should be recorded on the Detective Note Sheet provided and kept secret from all other players. The information may be a record of what is under a certain flap or may be an elimination of a suspect due to the discovery of clues obtained from picking up Murder cards. (N.B. Use a water based felt pen when recording information).</li>\n<li>If a player throws a double they have the choice of moving with that throw or ignoring it and throwing the dice again. If a double six is thrown then all Clue Counters, Weapons and Garden Ornaments are placed back onto the board (not necessarily in the positions they originally occupied but still obeying the instructions in "Setting up the Game"). If a stage is reached where there are only THREE Clue Counters remaining on the board then all the Clue Counters, Weapons and Garden Ornaments are replaced as above.</li>\n<li>Players are NOT allowed to move over other Character pieces, Weapons or Garden Ornaments.</li>\n<li>Players ARE allowed to move OVER, but not look at, Clue Counters during a turn.</li>\n<li>Players are NOT allowed to land on other Character pieces.</li>\n<li>Players are NOT allowed to land on Weapons or Garden Ornaments except when racing for a clue there.\n    <i><b>Recommend</b></i>:\n    <ol>\n        <li><i>Weapons and Garden ornaments, and Players are <b>blockages</b>. If an aforementioned object is in the doorway or stairs (to a room), it blocks entry & exit via that way!</i>\n        <li><i>Player CANNOT move over the space occupied by another player, unless agreed with each other on that turn. Without agreement, player will be blocked, and have to detour around it. With agreement, player may use 1 movement point to move onto the space and then off it. Players may NOT share and occupy the space together (at the end of the turn).</i>\n    </ol>\n</li>\n<li>Players may move over or land on a staircase or Super Cluedo space.</li>\n<li>If a player finishes a move in a room on a space ADJACENT to another player, the player entering the room can EITHER:\n    <ol>\n    <li>Leave the Character pieces as they are,</li>\n    <li>OR Remove the other Character piece and place it ANYWHERE else in the board, EXCEPT on the spaces occupied by:- another Character piece, a Weapon, a Garden Ornament or a Clue Counter. If there is more the one player adjacent then the player entering the room has the choice of moving EITHER Character Pieces as above, but NOT both.</li>\n    </ol>\n</li></ol>\n<h3><span class="mw-headline" id="Secret_Passages">Secret Passages</span></h3>\n<p>Underneath Tudor Close there is a maze of secret passages enabling players to take short cuts around the house. The secret passages can be entered or left through any of the ten staircases (one in the centre of the board and one in each room of the house). Moves can be made in one of the following ways:\n</p>\n<ol><li>Players may move from one staircase to another during the course of one turn (the distance between two staircases is one space). <b>Recommend:</b> Count each move onto a stair as 1 space. Stairs in the middle of the board count as 3 separate stairs/spaces. Tip: use up excess dice throw points by jumping stairs a few times.</li>\n<li>Players may move onto a staircase and stop there until their next turn. (An exact throw is not needed to do this). This staircase is then blocked until that player\'s next turn.</li>\n<li>Players may move from one staircase to another and stop on the second staircase until their next turn. Again, an exact throw is not needed and the staircase is then blocked until that player\'s next turn.</li></ol>\n<p>If at the start of any players turn they are occupying a staircase space they must state where they are moving to before throwing the dice. Players moving from the cellar staircase have the choice of starting from either of the two adjacent spaces. <b>Recommend:</b> For easier gameplay, let players go anywhere from the stairs, without prior declaration.\n</p>\n<h3><span class="mw-headline" id="Accusation">Accusation</span></h3>\n<p>When a player thinks he has discovered, by means of the information collected, the following three things: (1) The Murderer (2) The Weapon used (3) The room where the crime was committed. They must write this down clearly in the Accusation Box.\n</p>\n<h4><span class="mw-headline" id="In_a_2_player_game">In a 2 player game</span></h4>\n<p>The player making the accusation removes the cards from the holders. If the accusation is correct that player wins, if it is wrong the other player is the winner.\n</p>\n<h4><span class="mw-headline" id="In_a_game_of_more_than_2_players">In a game of more than 2 players</span></h4>\n<p>The player making the accusation looks at the Murder Cards without the other players seeing. If the accusation is correct that player is the winner. If it is wrong then that player replaces any Murder cards in their correct envelopes. They then place any Murder Cards they may have in their hand back on the bottom of the pile and are out of the game. The other players then continue as normal.\n</p>\n<h4><span class="mw-headline" id="In_web_based_game">In a web-based game</span></h4>\n<p><i><b>Recommend</b></i>: The computer checks the player\'s accusation instead of of the player themselves. Thus, if the accusation is wrong, that player may be allowed to resume play and to try to solve the mystery. Game then continue as normal.\n</p>\n</div>';function showRules(){popupRules?popupRules.restore():popupRules=new WinBox({title:"Rules",x:"10px",y:"100px",width:"70%",height:window.innerHeight-200+"px",html:RULES,onclose:function(){return this.minimize(),!0}})}const available="<font color='green'>&#x2714;</font>",gone="<font color='red'>&#x2718;</font>";function updateClueAvail(e,t){poupupCluesList&&e>0&&($(`#cc${e}`)[0].innerHTML=t||!removedClues[e]?available:gone)}function showCluesList(){if(poupupCluesList)$(".clue_counter_info").each(((e,t)=>{t.innerHTML=removedClues[e+1]?gone:available})),poupupCluesList.restore();else{let e="<h1>Available Clues</h1>\n";for(let t=1;t<CLUES.length;++t)e+=`<span id='cc${t}' class='clue_counter_info'>${removedClues[t]?gone:available}</span> ${t}. ${CLUES[t][0]}<br>\n`;poupupCluesList=new WinBox({title:"Available Clues",x:"10px",y:"100px",width:"50%",height:window.innerHeight-200+"px",html:e,onclose:function(){return this.minimize(),!0}})}}$(document).ready((()=>{$("#divPlayingArea")[0];AVOID_BLOCKING_ROOM_ENTRY=$("#option_unblock_entry")[0].checked,ALLOW_PEEKING_ANYTIME=$("#option_allow_peeks")[0].checked,createDice(),createDetectiveCard(),newGameBoard()}));